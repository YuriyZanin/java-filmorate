DROP TABLE IF EXISTS FILM_GENRES;
DROP TABLE IF EXISTS FILM_WHO_LIKED_USERS;
DROP TABLE IF EXISTS FILMS;
DROP TABLE IF EXISTS GENRES;
DROP TABLE IF EXISTS RATINGS;
DROP TABLE IF EXISTS FRIENDSHIPS;
DROP TABLE IF EXISTS EVENTS;
DROP TABLE IF EXISTS USERS;

CREATE TABLE IF NOT EXISTS ratings
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR
);

CREATE TABLE IF NOT EXISTS films
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    duration     INTEGER,
    description  VARCHAR,
    name         VARCHAR,
    RELEASE_DATE DATE,
    rating_id    INTEGER,
    FOREIGN KEY (rating_id) REFERENCES ratings (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS genres
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  INTEGER,
    genre_id VARCHAR,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR,
    login    VARCHAR,
    name     VARCHAR,
    birthday DATE,
    CONSTRAINT email_idx UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS film_who_liked_users
(
    film_id           INTEGER,
    who_liked_user_id INTEGER,
    PRIMARY KEY (film_id, who_liked_user_id),
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (who_liked_user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendships
(
    user_id   INTEGER,
    friend_id INTEGER,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users (id) ON DELETE CASCADE,
    CHECK user_id <> friend_id
);